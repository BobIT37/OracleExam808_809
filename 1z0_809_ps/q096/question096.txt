*******************Duplicate 1z0-809 exam (085)***************************************

Given the code fragment:
List<String> nL = Arrays.asList("Jim", "John", "Jeff");

Function<String, String> funVal = s -> "Hello : ".concat(s);

nL.stream().map(funVal).peek(System.out::print);
		
What is the result?
A. Hello : Jim Hello : John Hello : Jeff 
B. Jim John Jeff
C. The program prints nothing.
D. A compilation error occurs.

Answer: C. The program prints nothing.

peek

Stream<T> peek(Consumer<? super T> action)
Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream.
This is an intermediate operation.

For parallel stream pipelines, the action may be called at whatever time and in whatever thread the element is made available by the upstream operation. If the action modifies shared state, it is responsible for providing the required synchronization.

API Note:
This method exists mainly to support debugging, where you want to see the elements as they flow past a certain point in a pipeline:

     Stream.of("one", "two", "three", "four")
         .filter(e -> e.length() > 3)
         .peek(e -> System.out.println("Filtered value: " + e))
         .map(String::toUpperCase)
         .peek(e -> System.out.println("Mapped value: " + e))
         .collect(Collectors.toList());
 
Parameters:
action - a non-interfering action to perform on the elements as they are consumed from the stream
Returns:
the new stream