QUESTION 85

Given the code fragment:

Map<Integer, String> books = new TreeMap<>();

books.put (1007, "A");
books.put (1002, "C");
books.put (1001, "B");
books.put (1003, "B");

System.out.println (books);

What is the result?

A. {1007 = A, 1002 = C, 1001 = B, 1003 = B}
B. {1001 = B, 1002 = C, 1003 = B, 1007 = A}
C. {1002 = C, 1003 = B, 1007 = A}
D. {1007 = A, 1001 = B, 1003 = B, 1002 = C}

Answer: B

Map Implementations

java.util.HashMap
java.util.Hashtable
java.util.EnumMap
java.util.IdentityHashMap
java.util.LinkedHashMap
java.util.Properties
java.util.TreeMap
java.util.WeakHashMap


A Map is an object that maps keys to values. A map cannot contain duplicate keys: Each key can map to at most one value. It models the mathematical function abstraction. 
The Map interface includes methods for basic operations (such as put, get, remove, containsKey, containsValue, size, and empty), 
bulk operations (such as putAll and clear), 
and collection views (such as keySet, entrySet, and values).


HashMap: Lookup-array structure, based on hashCode(), equals() implementations, O(1) runtime complexity for inserting and searching, unsorted
TreeMap: Tree structure, based on compareTo() implementation, O(log(N)) runtime complexity for inserting and searching, sorted

